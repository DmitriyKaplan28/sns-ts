{"version":3,"file":"static/js/296.757d75ca.chunk.js","mappings":"yKACA,G,QAA0B,0BAA1B,EAAkE,8BAAlE,EAAyG,wBAAzG,EAA0I,wBAA1I,EAA6K,0BAA7K,EAAiN,yB,mBCQpMA,EAAS,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,KAChBC,EAAO,YADmC,EAApBC,GAE1B,OACI,gBAAKC,UAAWC,EAAiB,IAAMA,EAAvC,UACI,SAAC,KAAD,CAASC,GAAIJ,EAAb,SAAoBD,OCJnBM,EAAU,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,QAA8B,EAArBL,GAC9B,OACI,gBAAKC,UAAWC,EAAhB,SAAkCG,K,uCC6BpCC,GAAeC,EAAAA,EAAAA,GAAiB,KAehCC,GAAsBC,EAAAA,EAAAA,GAAwB,CAACC,KAAM,kBAA/BD,EAbsC,SAACE,GAE/D,OACI,kBAAMC,SAAUD,EAAME,aAAtB,WACI,SAACC,EAAA,EAAD,CAAOC,YAAa,qBACbjB,KAAM,iBACNkB,UAAWC,EAAAA,GACXC,SAAU,CAACC,EAAAA,EAAeb,MAEjC,2C,UCXCc,GAAmBC,E,QAAAA,KAA6BC,EAAAA,EAAAA,KAfvC,SAACC,GACnB,MAAO,CACHC,aAAcD,EAAME,YACpBC,OAAQH,EAAMI,KAAKD,WAIF,SAACE,GACtB,MAAO,CACHC,YAAa,SAACC,GACVF,GAASG,EAAAA,EAAAA,GAAcD,SAKHT,ED/BT,SAAC,GAA2D,IAAD,IAAzDG,EAAyD,EAAzDA,aAAcK,EAA2C,EAA3CA,YAE/BG,GAF0E,EAA9BN,OAE7B,UAAGF,EAAaS,eAAhB,aAAG,EAAsBC,KAAI,SAACC,EAAQC,GAAT,OAAmB,SAACvC,EAAD,CACQC,KAAMqC,EAAOrC,KACbE,GAAImC,EAAOnC,IAFNoC,OAG5EC,EAAgB,UAAGb,EAAac,gBAAhB,aAAG,EAAuBJ,KAAI,SAAC7B,EAAS+B,GAAV,OAAoB,SAAChC,EAAD,CAElEC,QAASA,EAAQA,SADZ+B,MAMT,OACI,iBAAKnC,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACK8B,KAEL,iBAAK/B,UAAWC,EAAhB,WACI,yBAAMmC,KACN,0BACI,SAAC7B,EAAD,CAAqBI,SAZf,SAAC2B,GACnBV,EAAYU,EAAST","sources":["webpack://my-app/./src/features/Dialogs/Dialogs.module.css?95d5","features/Dialogs/Dialog/Dialog.tsx","features/Dialogs/Message/Message.tsx","features/Dialogs/Dialogs.tsx","features/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__VSh1C\",\"dialogsItems\":\"Dialogs_dialogsItems__Q4U-A\",\"dialog\":\"Dialogs_dialog__MxLp-\",\"active\":\"Dialogs_active__2tIVR\",\"messages\":\"Dialogs_messages__pxQtr\",\"message\":\"Dialogs_message__4SSZ6\"};","import classes from \"../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\nexport type DialogType = {\r\n    name: string\r\n    id: string\r\n}\r\n\r\nexport const Dialog = ({name, id}: DialogType) => {\r\n    let path = \"/dialogs/\" + id;\r\n    return (\r\n        <div className={classes.dialog + ' ' + classes.active}>\r\n            <NavLink to={path}>{name}</NavLink>\r\n        </div>\r\n    )\r\n}","import classes from \"../Dialogs.module.css\";\r\nimport React from \"react\";\r\n\r\nexport type MessageType = {\r\n    message: string\r\n    id?: string\r\n}\r\n\r\n\r\nexport const Message = ({message, id}: MessageType) => {\r\n    return (\r\n        <div className={classes.message}>{message}</div>\r\n    )\r\n}","import React from 'react';\r\nimport classes from './Dialogs.module.css';\r\nimport {Dialog} from \"./Dialog/Dialog\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {TextArea} from \"../../common/components/FormControls/FormControls\";\r\nimport {maxLengthCreator, requiredField} from \"../../common/utils/validators/validators\";\r\n\r\nexport const Dialogs = ({dialogsState, sendMessage, isAuth}: DialogsPropsType) => {\r\n\r\n    let dialogsElements = dialogsState.dialogs?.map((dialog, index) => <Dialog key={index}\r\n                                                                               name={dialog.name}\r\n                                                                               id={dialog.id}/>)\r\n    let messagesElements = dialogsState.messages?.map((message, index) => <Message\r\n        key={index}\r\n        message={message.message}/>)\r\n    const addNewMessage = (formData: FormDataType) => {\r\n        sendMessage(formData.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={classes.messages}>\r\n                <div>{messagesElements}</div>\r\n                <div>\r\n                    <AddMessageReduxForm onSubmit={addNewMessage}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype FormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst maxLength100 = maxLengthCreator(100)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field placeholder={'Enter your message'}\r\n                   name={'newMessageBody'}\r\n                   component={TextArea}\r\n                   validate={[requiredField, maxLength100]}\r\n            />\r\n            <button>Send</button>\r\n        </form>)\r\n}\r\n\r\nconst AddMessageReduxForm = reduxForm<FormDataType>({form: 'addMessageForm'})(AddMessageForm)","import React from 'react';\r\nimport {DialogType} from \"./Dialog/Dialog\";\r\nimport {MessageType} from \"./Message/Message\";\r\nimport {sendMessageAC} from \"../../store/dialogsReducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../store/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\n\r\nexport type DialogsStateType = {\r\n    dialogs: DialogType[]\r\n    messages: MessageType[]\r\n}\r\n\r\ntype MapStateToPropsDialogsType = {\r\n    dialogsState: DialogsStateType\r\n    isAuth: boolean\r\n}\r\n\r\ntype mapDispatchToPropsDialogsType = {\r\n    sendMessage: (newMessageBody: string) => void\r\n}\r\n\r\nexport type DialogsPropsType = MapStateToPropsDialogsType & mapDispatchToPropsDialogsType\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsDialogsType => {\r\n    return {\r\n        dialogsState: state.dialogsPage,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsDialogsType => {\r\n    return {\r\n        sendMessage: (newMessageBody: string) => {\r\n            dispatch(sendMessageAC(newMessageBody))\r\n        },\r\n    }\r\n}\r\n\r\nexport const DialogsContainer = compose<React.ComponentType>(connect(mapStateToProps, mapDispatchToProps))(Dialogs)"],"names":["Dialog","name","path","id","className","classes","to","Message","message","maxLength100","maxLengthCreator","AddMessageReduxForm","reduxForm","form","props","onSubmit","handleSubmit","Field","placeholder","component","TextArea","validate","requiredField","DialogsContainer","compose","connect","state","dialogsState","dialogsPage","isAuth","auth","dispatch","sendMessage","newMessageBody","sendMessageAC","dialogsElements","dialogs","map","dialog","index","messagesElements","messages","formData"],"sourceRoot":""}