{"version":3,"file":"static/js/135.1758a035.chunk.js","mappings":"yKACA,G,QAA0B,0BAA1B,EAAkE,8BAAlE,EAAyG,wBAAzG,EAA0I,wBAA1I,EAA6K,0BAA7K,EAAiN,yB,mBCQpMA,EAAS,SAACC,GACnB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,gBAAKC,UAAWC,EAAiB,IAAMA,EAAvC,UACI,SAAC,KAAD,CAASC,GAAIJ,EAAb,SAAoBD,EAAMM,UCLzBC,EAAU,SAACP,GACpB,OACI,gBAAKG,UAAWC,EAAhB,SAAkCJ,EAAMQ,W,uCC2B1CC,GAAeC,EAAAA,EAAAA,GAAiB,KAehCC,GAAsBC,EAAAA,EAAAA,GAAwB,CAACC,KAAM,kBAA/BD,EAbsC,SAACZ,GAE/D,OACI,kBAAMc,SAAUd,EAAMe,aAAtB,WACI,SAACC,EAAA,EAAD,CAAOC,YAAa,qBACbX,KAAM,iBACNY,UAAWC,EAAAA,GACXC,SAAU,CAACC,EAAAA,EAAeZ,MAEjC,2C,UCPCa,GAAmBC,E,QAAAA,KAA6BC,EAAAA,EAAAA,KAfvC,SAACC,GACnB,MAAO,CACHC,aAAcD,EAAME,YACpBC,OAAQH,EAAMI,KAAKD,WAIF,SAACE,GACtB,MAAO,CACHC,YAAa,SAACC,GACVF,GAASG,EAAAA,EAAAA,GAAcD,SAKHT,EDhCT,SAACvB,GAA6B,IAAD,IAE5CkC,EAAe,OAAGlC,QAAH,IAAGA,GAAH,UAAGA,EAAO0B,aAAaS,eAAvB,aAAG,EAA6BC,KAAI,SAACC,EAAQC,GAAT,OAAmB,SAACvC,EAAD,CAAoBO,KAAM+B,EAAO/B,KAAMJ,GAAImC,EAAOnC,IAArCoC,MACnFC,EAAgB,OAAGvC,QAAH,IAAGA,GAAH,UAAGA,EAAO0B,aAAac,gBAAvB,aAAG,EAA8BJ,KAAI,SAAC5B,EAAS8B,GAAV,OAAoB,SAAC/B,EAAD,CACSC,QAASA,EAAQA,SADZ8B,MAM3F,OACI,iBAAKnC,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACK8B,KAEL,iBAAK/B,UAAWC,EAAhB,WACI,yBAAMmC,KACN,0BACI,SAAC5B,EAAD,CAAqBG,SAZf,SAAC2B,GACnBzC,EAAM+B,YAAYU,EAAST","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__5yc4T\",\"dialogsItems\":\"Dialogs_dialogsItems__ZjI1n\",\"dialog\":\"Dialogs_dialog__HpJYm\",\"active\":\"Dialogs_active__-RRz6\",\"messages\":\"Dialogs_messages__hhuSL\",\"message\":\"Dialogs_message__zjwAG\"};","import classes from \"../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\nexport type DialogType = {\r\n    name: string\r\n    id: string\r\n}\r\n\r\nexport const Dialog = (props: DialogType) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return (\r\n        <div className={classes.dialog + ' ' + classes.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}","import classes from \"../Dialogs.module.css\";\r\nimport React from \"react\";\r\n\r\nexport type MessageType = {\r\n    message: string\r\n    id?: string\r\n}\r\n\r\nexport const Message = (props: MessageType) => {\r\n    return (\r\n        <div className={classes.message}>{props.message}</div>\r\n    )\r\n}","import React from 'react';\r\nimport classes from './Dialogs.module.css';\r\nimport {Dialog} from \"./Dialog/Dialog\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {TextArea} from \"../common/FormControls/FormControls\";\r\nimport {maxLengthCreator, requiredField} from \"../../utils/validators/validators\";\r\n\r\nexport const Dialogs = (props: DialogsPropsType) => {\r\n\r\n    let dialogsElements = props?.dialogsState.dialogs?.map((dialog, index) => <Dialog key={index} name={dialog.name} id={dialog.id}/>)\r\n    let messagesElements = props?.dialogsState.messages?.map((message, index) => <Message key={index}\r\n                                                                                          message={message.message}/>)\r\n    const addNewMessage = (formData: FormDataType) => {\r\n        props.sendMessage(formData.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={classes.messages}>\r\n                <div>{messagesElements}</div>\r\n                <div>\r\n                    <AddMessageReduxForm onSubmit={addNewMessage}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype FormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst maxLength100 = maxLengthCreator(100)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field placeholder={'Enter your message'}\r\n                   name={'newMessageBody'}\r\n                   component={TextArea}\r\n                   validate={[requiredField, maxLength100]}\r\n            />\r\n            <button>Send</button>\r\n        </form>)\r\n}\r\n\r\nconst AddMessageReduxForm = reduxForm<FormDataType>({form: 'addMessageForm'})(AddMessageForm)","import React from 'react';\r\nimport {DialogType} from \"./Dialog/Dialog\";\r\nimport {MessageType} from \"./Message/Message\";\r\nimport {sendMessageAC} from \"../../redux/dialogsReducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\n\r\nexport type DialogsStateType = {\r\n    dialogs: DialogType[]\r\n    messages: MessageType[]\r\n}\r\n\r\ntype MapStateToPropsDialogsType = {\r\n    dialogsState: DialogsStateType\r\n    isAuth: boolean\r\n\r\n}\r\n\r\ntype mapDispatchToPropsDialogsType = {\r\n    sendMessage: (newMessageBody: string) => void\r\n}\r\n\r\nexport type DialogsPropsType = MapStateToPropsDialogsType & mapDispatchToPropsDialogsType\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsDialogsType => {\r\n    return {\r\n        dialogsState: state.dialogsPage,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsDialogsType => {\r\n    return {\r\n        sendMessage: (newMessageBody: string) => {\r\n            dispatch(sendMessageAC(newMessageBody))\r\n        },\r\n    }\r\n}\r\n\r\nexport const DialogsContainer = compose<React.ComponentType>(connect(mapStateToProps, mapDispatchToProps))(Dialogs)"],"names":["Dialog","props","path","id","className","classes","to","name","Message","message","maxLength100","maxLengthCreator","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","TextArea","validate","requiredField","DialogsContainer","compose","connect","state","dialogsState","dialogsPage","isAuth","auth","dispatch","sendMessage","newMessageBody","sendMessageAC","dialogsElements","dialogs","map","dialog","index","messagesElements","messages","formData"],"sourceRoot":""}